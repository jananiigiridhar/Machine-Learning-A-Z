#Data preprocessing
#Importing the dataset
dataset = read.csv('data.csv')
#Taking care of missing values
dataset$Age = ifelse(is.na(dataset$Age),mean(dataset$Age,na.rm = T),dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),mean(dataset$Salary,na.rm = T),dataset$Salary)
#Encoding categorical data
dataset$Country = factor(dataset$Country,levels = c('France','Spain','Germany'),labels = c(1,2,3))
dataset$Purchased = factor(dataset$Purchased,levels = c('Yes','No'),labels = c(1,0))
#splitting the dataset into train and test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset,SplitRatio = 0.8)
training_set = subset(dataset,split == TRUE)
testing_set = subset(dataset,split == FALSE)
#Feature scaling
training_set[,2:3] = scale(training_set[,2:3])
testing_set[,2:3] = scale(testing_set[,2:3])
setwd("~/MSBAPM/Machine Learning A-Z udemy/Regression/Simple_Linear_Regression")
dataset = read.csv('Salary_Data.csv')
View(dataset)
View(dataset)
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
rm(testing_set)
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(test_set)
View(test_set)
regressor = lm(formula = Salary ~ YearsExperience,data = dataset)
summary(regessor)
summary(regressor)
regressor = lm(formula = Salary ~ YearsExperience,data = training_set)
summary(regressor)
test_pred = predict(regressor)
test_pred = predict(regressor, newdata = test_set)
install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
geom_point(aes(x = training_set$YearsExperience,y = training_set$Salary))
ggplot() +
geom_point(aes(x = training_set$YearsExperience,y = training_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, training_set$YearsExperience)),
colour = 'blue')
ggplot() +
geom_point(aes(x = training_set$YearsExperience,y = training_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue')
ggplot() +
geom_point(aes(x = training_set$YearsExperience,y = training_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience') +
xlab('years of Experience') +
ylab('Salary')
#Visualizing the training set results
install.packages("ggplot2")
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$YearsExperience,y = training_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Training set)') +
xlab('years of Experience') +
ylab('Salary')
install.packages("ggplot2")
ggplot() +
geom_point(aes(x = training_set$YearsExperience,y = training_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Training set)') +
xlab('years of Experience') +
ylab('Salary')
ggplot() +
geom_point(aes(x = test_set$YearsExperience,y = test_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Testing set)') +
xlab('years of Experience') +
ylab('Salary')
setwd("~/MSBAPM/Machine Learning A-Z udemy/Regression/Multiple_Linear_Regression")
dataset = read.csv('50_Startups.csv')
levels(factor(dataset$State))
dataset$State = factor(dataset$State,levels = levels(factor(dataset$State)), labels = c(1,2,3))
View(dataset)
View(dataset)
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
regressor = lm(formula = Profit~R.D.Spend+Administration+Marketing.Spend+State,data = training_set)
regressor = lm(formula = Profit~.,data = training_set)
summary(regressor)
regressor = lm(formula = Profit~R.D.Spend+Administration+Marketing.Spend+State,data = dataset)
summary(regressor)
regressor = lm(formula = Profit~R.D.Spend+Administration+Marketing.Spend,data = dataset)
summary(regressor)
regressor = lm(formula = Profit~R.D.Spend+Marketing.Spend,data = dataset)
summary(regressor)
regressor = lm(formula = Profit~R.D.Spend,data = dataset)
summary(regressor)
test_pred = predict(regressor,newdata = test_set)
setwd("~/MSBAPM/Machine Learning A-Z udemy/Regression/Polynomial_Regression")
dataset = read.csv('Position_Salaries.csv')
dataset = read.csv('Position_Salaries.csv')
regressor = lm(formula = Salary ~ Level,data = dataset)
summary(regressor)
dataset = dataset[,2:3]
regressor = lm(formula = Salary ~ Level,data = dataset)
summary(regressor)
summary(regressor)
lin_reg = lm(formula = Salary ~ Level,data = dataset)
summary(regressor)
summary(lin_reg)
rm(regressor)
lin_reg = lm(formula = Salary ~ .,data = dataset)
summary(lin_reg)
dataset$Level2 = dataset$Level ^ 2
pol_reg = lm(formula = Salary ~ .,data = dataset)
summary(pol_reg)
dataset$Level3 = dataset$Level ^ 3
pol_reg = lm(formula = Salary ~ .,data = dataset)
summary(pol_reg)
dataset$Level4 = dataset$Level ^ 4
pol_reg = lm(formula = Salary ~ .,data = dataset)
summary(pol_reg)
ggplot() +
geom_point(dataset$Level,dataset$Salary,colour = 'Red') +
geom_line(dataset$Level,predict(lin_reg,newdata = dataset$Level))
title('Truth vs Lies(LinReg)') +
xlab('Level') +
ylab('Salary')
ggplot() +
geom_point(aes(dataset$Level,dataset$Salary),colour = 'Red') +
geom_line(aes(dataset$Level,predict(lin_reg,newdata = dataset$Level)),colour = 'blue')
title('Truth vs Lies(LinReg)') +
xlab('Level') +
ylab('Salary')
ggplot() +
geom_point(aes(dataset$Level,dataset$Salary),colour = 'Red') +
geom_line(aes(dataset$Level,predict(lin_reg,newdata = dataset$Level)),colour = 'blue')
title('Truth vs Lies(LinReg)') +
xlab('Level') +
ylab('Salary')
ggplot() +
geom_point(aes(dataset$Level,dataset$Salary),colour = 'Red') +
geom_line(aes(dataset$Level,predict(lin_reg,newdata = dataset)),colour = 'blue')
ggtitle('Truth vs Lies(LinReg)') +
xlab('Level') +
ylab('Salary')
ggplot() +
geom_point(aes(dataset$Level,dataset$Salary),colour = 'Red') +
geom_line(aes(dataset$Level,predict(lin_reg,newdata = dataset)),colour = 'blue') +
ggtitle('Truth vs Lies(LinReg)') +
xlab('Level') +
ylab('Salary')
ggplot() +
geom_point(aes(dataset$Level,dataset$Salary),colour = 'Red') +
geom_line(aes(dataset$Level,predict(pol_reg,newdata = dataset)),colour = 'blue') +
ggtitle('Truth vs Lies(LinReg)') +
xlab('Level') +
ylab('Salary')
predict(lin_reg,newdata = dataset)
predict(pol_reg,newdata = dataset)
y_pred = predict(lin_reg,newdata = data.frame(Level = 6.5))
predict(pol_reg,newdata = data.frame(Level = 6.5))
predict(pol_reg,newdata = data.frame(Level = 6.5,Level2 = 6.5^2,Level3 = 6.5^3,Level4 = 6.5^4))
y_pred = predict(pol_reg,newdata = data.frame(Level = 6.5,Level2 = 6.5^2,Level3 = 6.5^3,Level4 = 6.5^4))
setwd("~/MSBAPM/Machine Learning A-Z udemy/Regression/SVR")
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
install.packages("e1071")
library(e1071)
regressor = svm(formula = Salary ~.,data = dataset,type = 'eps-regression')
y_pred = predict(regressor, data.frame(Level = 6.5))
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Regression Model)') +
xlab('Level') +
ylab('Salary')
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Regression Model)') +
xlab('Level') +
ylab('Salary')
install.packages("rpart")
library(rpart)
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
library(rpart)
regressor = rpart(formula = Salary ~ .,data = dataset)
y_pred = predict(regressor, data.frame(Level = 6.5))
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Regression Model)') +
xlab('Level') +
ylab('Salary')
regressor = rpart(formula = Salary ~ .,data = dataset,control = rpart.control(minsplit = 1))
y_pred = predict(regressor, data.frame(Level = 6.5))
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Regression Model)') +
xlab('Level') +
ylab('Salary')
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Regression Model)') +
xlab('Level') +
ylab('Salary')
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Regression Model)') +
xlab('Level') +
ylab('Salary')
y_pred = predict(regressor, data.frame(Level = 6.5))
regressor = rpart(formula = Salary ~ .,data = dataset,control = rpart.control(minsplit = 10))
y_pred = predict(regressor, data.frame(Level = 6.5))
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Regression Model)') +
xlab('Level') +
ylab('Salary')
regressor = rpart(formula = Salary ~ .,data = dataset,control = rpart.control(minsplit = 20))
y_pred = predict(regressor, data.frame(Level = 6.5))
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Regression Model)') +
xlab('Level') +
ylab('Salary')
regressor = rpart(formula = Salary ~ .,data = dataset,control = rpart.control(minsplit = 1))
y_pred = predict(regressor, data.frame(Level = 6.5))
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Regression Model)') +
xlab('Level') +
ylab('Salary')
install.packages("randomForest")
library(randomForest)
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
library(randomForest)
set.seed(123)
regressor = randomForest(x = dataset[1], y = dataset$Salary, ntree = 10)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Random Forest)') +
xlab('Level') +
ylab('Salary')
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Random Forest)') +
xlab('Level') +
ylab('Salary')
y_pred = predict(regressor, data.frame(Level = 6.5))
library(randomForest)
set.seed(123)
regressor = randomForest(x = dataset[1], y = dataset$Salary, ntree = 100)
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Random Forest)') +
xlab('Level') +
ylab('Salary')
y_pred = predict(regressor, data.frame(Level = 6.5))
library(randomForest)
set.seed(123)
regressor = randomForest(x = dataset[1], y = dataset$Salary, ntree = 300)
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Random Forest)') +
xlab('Level') +
ylab('Salary')
y_pred = predict(regressor, data.frame(Level = 6.5))
library(randomForest)
set.seed(123)
regressor = randomForest(x = dataset[1], y = dataset$Salary, ntree = 500)
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Random Forest)') +
xlab('Level') +
ylab('Salary')
y_pred = predict(regressor, data.frame(Level = 6.5))
library(randomForest)
set.seed(123)
regressor = randomForest(x = dataset[1], y = dataset$Salary, ntree = 500)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Random Forest)') +
xlab('Level') +
ylab('Salary')
y_pred = predict(regressor, data.frame(Level = 6.5))
