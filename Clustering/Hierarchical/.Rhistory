#two tasks t1(time for task 1), t2(time for task 2), one after another
t1 = rnorm(50000,5,4)
t2 = runif(50000,3,7)
t = t1+t2
pnorm(q = 10,mean(t),sd(t))
#two tasks t1(time for task 1),t2(time for task 2), together
t1 = rnorm(50000,5,4)
t2 = runif(50000,3,7)
p1 = pnorm(q = 10,mean(t1),sd(t1))
p2 = pnorm(q = 10,mean(t2),sd(t2))
p1*p2
s1 = t[t <10]
length(s1)/length(t)
t1 = rnorm(50000,5,4)
t2 = runif(50000,3,7)
t = max(t1,t2)
s1 = t[t<10]
length(s1)/length(t)
length(s1)/length(t)
t = ifelse(t1 > t2,t1,t2)
s1 = t[t<10]
length(s1)/length(t)
plot(density(t))
plot(density(t))
#two tasks t1(time for task 1), t2(time for task 2), one after another
t1 = rnorm(50000,5,4)
t2 = runif(50000,3,7)
t = t1+t2
#pnorm(q = 10,mean(t),sd(t))
s1 = t[t<10]
length(s1)/length(t)
plot(density(t))
#two tasks t1(time for task 1),t2(time for task 2), together
t1 = rnorm(50000,5,4)
t2 = runif(50000,3,7)
# p1 = pnorm(q = 10,mean(t1),sd(t1))
# p2 = pnorm(q = 10,mean(t2),sd(t2))
# p1*p2
t = ifelse(t1 > t2,t1,t2)
s1 = t[t<10]
length(s1)/length(t)
plot(density(t))
median(t)
median(t)
#two tasks t1(time for task 1), t2(time for task 2), one after another
t1 = rnorm(50000,5,4)
t2 = runif(50000,3,7)
t = t1+t2
#pnorm(q = 10,mean(t),sd(t))
s1 = t[t<10]
length(s1)/length(t)
plot(density(t))
median(t)
#two tasks t1(time for task 1),t2(time for task 2), together
t1 = rnorm(50000,5,4)
t2 = runif(50000,3,7)
# p1 = pnorm(q = 10,mean(t1),sd(t1))
# p2 = pnorm(q = 10,mean(t2),sd(t2))
# p1*p2
t = ifelse(t1 > t2,t1,t2)
s1 = t[t<10]
length(s1)/length(t)
plot(density(t))
median(t)
x = rnorm(100,mean = 12, sd = 5)
mean(x)
sd(x)
x = rnorm(100,mean = 12, sd = 5)
mean(x)
sd(x)
x = rnorm(100,mean = 12, sd = 5)
mean(x)
sd(x)
x = rnorm(100,mean = 12, sd = 5)
mean(x)
sd(x)
x = rnorm(100,mean = 12, sd = 5)
mean(x)
sd(x)
x = rnorm(100,mean = 12, sd = 5)
mean(x)
sd(x)
x = rnorm(100,mean = 12, sd = 5)
mean(x)
sd(x)
x = rnorm(100,mean = 12, sd = 5)
mean(x)
sd(x)
x = rnorm(100,mean = 12, sd = 5)
mean(x)
sd(x)
x = rnorm(100,mean = 12, sd = 5)
mean(x)
sd(x)
x = rnorm(100,mean = 12, sd = 5)
mean(x)
sd(x)
x = rnorm(100,mean = 12, sd = 5)
mean(x)
sd(x)
x = rnorm(100,mean = 12, sd = 5)
mean(x)
sd(x)
a = c(1,2,3)
a(1:1)
a[1]
a[1:1]
a[1:2]
a[1:3]
m = c()
m.append(2)
RunningMean = function(vector){
meanValues = c()
for(i in length(vector)){
meanValues = c(meanValues,mean(vector[1:i]))
}
return(meanValues)
}
a = c(3,4,5,6,7,8)
RunningMean(a)
length(a)
RunningMean = function(vector){
meanValues = c()
for(i in vector){
meanValues = c(meanValues,mean(vector[1:i]))
}
return(meanValues)
}
a = c(3,4,5,6,7,8)
RunningMean(a)
mean(3)
mean(3,4)
mean(c(3,4))
RunningMean = function(vector){
meanValues = c()
for(i in vector){
print(vector[i])
meanValues = c(meanValues,mean(vector[1:i]))
}
return(meanValues)
}
a = c(3,4,5,6,7,8)
RunningMean(a)
RunningMean = function(vector){
meanValues = c()
for(i in 1:length(vector)){
print(vector[i])
meanValues = c(meanValues,mean(vector[1:i]))
}
return(meanValues)
}
a = c(3,4,5,6,7,8)
RunningMean(a)
b = c(10,70,45,32,20)
RunningMean(b)
RunningMean = function(vector){
meanValues = c()
for(i in 1:length(vector)){
meanValues = c(meanValues,mean(vector[1:i]))
}
return(meanValues)
}
a = c(3,4,5,6,7,8)
RunningMean(a)
b = c(10,70,45,32,20)
RunningMean(b)
m = data.frame(Actual = 10,Predicted = 10)
forecast = function(vector,alpha = 0.8){
forecastValues = data.frame() #Defining the output Data Frame
forecastValues = rbind(forecastValues,data.frame(Actual = vector[1],Predicted = vector[1]))
for(i in 2:length(vector)){
Predicted = forecastValues$Predicted[i-1]+alpha*(forecastValues$Actual[i-1] - forecastValues$Predicted[i-1])
forecastValues = rbind(forecastValues,data.frame(Actual = vector[i],Predicted = Predicted))
}
return(forecastValues)
}
a = c(10,15,20,25,30)
forecast(a)
b = c(6,8,9,11,12)
forecast(b)
install.packages("schoolmath")
library(schoolmath)
is.prime(3)
is.prim(3)
NumberOfPrimes = fucntion(a=1,b=1){
count = 0
for(i in ifelse(a<b,a:b,b:a)){
if(is.prim(i)){
count = count + 1
}
}
return(count)
}
NumberOfPrimes = fucntion(a=1,b=1){
count = 0
for(i in ifelse(a<b,a:b,b:a)){
if(is.prim(i)){
count = count + 1
}
}
return(count)
}
NumberOfPrimes = fucntion(a=1,b=1){
}
NumberOfPrimes = function(a=1,b=1){
count = 0
for(i in ifelse(a<b,a:b,b:a)){
if(is.prim(i)){
count = count + 1
}
}
return(count)
}
forecast(1,5)
NumberOfPrimes(1,5)
NumberOfPrimes(10,5)
is.prim(1)
is.prim(2)
is.prim(3)
is.prim(4)
NumberOfPrimes = function(a=1,b=1){
count = 0
for(i in a:b){
if(is.prim(i)){
count = count + 1
}
}
return(count)
}
NumberOfPrimes(1,5)
NumberOfPrimes(10,5)
NumberOfPrimes()
NumberOfPrimes(10,5)
RollDice = function(){
Vector = c(1,2,3,4,5,6) #All possible outcomes of rolling a dice
results = sample(x = vector,size = 2,replace = T) #storing the results of simulating two dice rolls
ifelse(results[1]==results[2],return("You Win"),return("You Lose")) #returning results after comparision
}
RollDice()
Vector = c(1,2,3,4,5,6) #All possible outcomes of rolling a dice
results = sample(x = vector,size = 2,replace = T) #storing the results of simulating two dice rolls
results = sample(x = vector,size = 2,replace = TRUE) #storing the results of simulating two dice rolls
sample(1:6,2,T)
results = sample(vector,size = 2,replace = TRUE) #storing the results of simulating two dice rolls
sample(vector,size = 2,replace = TRUE)
sample(vector,size = 2,replace = TRUE)
result = sample(vector,size = 2,replace = TRUE) #storing the results of simulating two dice rolls
result = sample(x = vector,size = 2,replace = TRUE) #storing the results of simulating two dice rolls
sample(vector)
sample(1:6)
result = sample(n = vector,size = 2,replace = TRUE) #storing the results of simulating two dice rolls
result = sample(vector,2,TRUE) #storing the results of simulating two dice rolls
sample(vector,2,TRUE)
sample(vector,2,TRUE)
sample(c(1,2,3,4,5,6),2,TRUE)
result = sample(outcome,2,TRUE) #storing the results of simulating two dice rolls
outcome = c(1,2,3,4,5,6) #All possible outcomes of rolling a dice
result = sample(outcome,2,TRUE) #storing the results of simulating two dice rolls
result = sample(x = outcome,size = 2,replace = TRUE) #storing the results of simulating two dice rolls
ifelse(result[1]==result[2],return("You Win"),return("You Lose")) #returning results after comparision
RollDice = function(){
outcome = c(1,2,3,4,5,6) #All possible outcomes of rolling a dice
result = sample(x = outcome,size = 2,replace = TRUE) #storing the results of simulating two dice rolls
ifelse(result[1]==result[2],return("You Win"),return("You Lose")) #returning results after comparision
}
RollDice()
RollDice()
RollDice()
RollDice()
RollDice()
RollDice()
RollDice()
RollDice()
RollDice()
RollDice = function(){
outcome = c(1,2,3,4,5,6) #All possible outcomes of rolling a dice
result = sample(x = outcome,size = 2,replace = TRUE) #storing the results of simulating two dice rolls
print(result)
ifelse(result[1]==result[2],return("You Win"),return("You Lose")) #returning results after comparision
}
RollDice()
RollDice()
RollDice()
RollDice()
RollDice()
RollDice()
RollDice()
RollDice()
RollDice = function(){
outcome = c(1,2,3,4,5,6) #All possible outcomes of rolling a dice
result = sample(x = outcome,size = 2,replace = TRUE) #storing the results of simulating two dice rolls
print(result)
ifelse(result[1]==result[2],return("You Win"),return("You Lose")) #returning results after comparision
}
RollDice()
RollDice()
RollDice = function(){
outcome = c(1,2,3,4,5,6) #All possible outcomes of rolling a dice
result = sample(x = outcome,size = 2,replace = TRUE) #storing the results of simulating two dice rolls
ifelse(result[1]==result[2],return("You Win"),return("You Lose")) #returning results after comparision
}
RollDice()
RollDice()
RollDice()
RollDice()
Missing = function(dataFrame){
resultFrame = data.frame()
for(i in 1:ncol(dataFrame)){
x1 = colnames(dataFrame)[i]
x2 = sum(is.na(dataFrame[,i]))
x3 = sum(is.na(dataFrame[,i]))/length(dataFrame[,i])
x4 = length(unique(dataFrame[,i]))
resultFrame = rbind(resultFrame,data.frame(x1,x2,x3,x4))
}
colnames(resultFrame) = c("Column Name","Missing Values","% Missing Values","Unique Values")
return(resultFrame)
}
Missing(survey)
library(MASS)
Missing(survey)
Missing(whiteside)
library(help = MASS)
Missing(Boston)
Missing(survey)
#<-------------------------Question 1--------------------------->
# Defining a function that computes the running mean of a vector
RunningMean = function(vector){
meanValues = c() #Defining the output vector
for(i in 1:length(vector)){
meanValues = c(meanValues,mean(vector[1:i])) #Taking the running mean for ith element
}
return(meanValues)
}
# Sample Input 1
a = c(3,4,5,6,7,8)
RunningMean(a)
#Sample Input 2
b = c(10,70,45,32,20)
RunningMean(b)
#<-------------------------Question 2--------------------------->
forecast = function(vector,alpha = 0.8){
forecastValues = data.frame() #Defining the output Data Frame
forecastValues = rbind(forecastValues,data.frame(Actual = vector[1],Predicted = vector[1])) #Adding the first row values from the vector
for(i in 2:length(vector)){
Predicted = forecastValues$Predicted[i-1]+alpha*(forecastValues$Actual[i-1] - forecastValues$Predicted[i-1]) #Defining the formula
forecastValues = rbind(forecastValues,data.frame(Actual = vector[i],Predicted = Predicted)) #Binding the new values to the data frame
}
return(forecastValues)
}
# Sample Input 1
a = c(10,15,20,25,30)
forecast(a)
# Sample Input 2
b = c(6,8,9,11,12)
forecast(b)
#install.packages("schoolmath")
library(schoolmath) #loading the schoolmath package
NumberOfPrimes = function(a=1,b=1){
count = 0 #Initializing the count value to zero
for(i in a:b){
if(is.prim(i)){ #using is.prim function from schoolmath package to check wheather a number is prime or not
count = count + 1 #using counter to count the number of primes
}
}
return(count)
}
# Sample Input 1
NumberOfPrimes(1,5)
# Sample Input 2
NumberOfPrimes(10,5)
#<-------------------------Question 4--------------------------->
RollDice = function(){
outcome = c(1,2,3,4,5,6) #All possible outcomes of rolling a dice
result = sample(x = outcome,size = 2,replace = TRUE) #storing the results of simulating two dice rolls
ifelse(result[1]==result[2],return("You Win"),return("You Lose")) #returning results after comparision
}
# Sample Trial 1
RollDice()
# Sample Trial 2
RollDice()
#<-------------------------Question 5--------------------------->
Missing = function(dataFrame){
resultFrame = data.frame() #Intitializing the result Data Frame
for(i in 1:ncol(dataFrame)){
x1 = colnames(dataFrame)[i] #Retrieving the column name
x2 = sum(is.na(dataFrame[,i])) #calculating the number of NA values
x3 = sum(is.na(dataFrame[,i]))/length(dataFrame[,i]) #Calculating the % of NA values
x4 = length(unique(dataFrame[,i])) #Calculating the number of unique values
resultFrame = rbind(resultFrame,data.frame(x1,x2,x3,x4)) #Binding the new results to the data frame
}
colnames(resultFrame) = c("Column Name","Missing Values","% Missing Values","Unique Values") #Defining the column names
return(resultFrame)
}
# Sample input 1
library(MASS)
Missing(survey)
# Sample input 2
Missing(Boston)
forecast(c(10,20,30,40,50))
#<-------------------------Question 1--------------------------->
# Defining a function that computes the running mean of a vector
RunningMean = function(vector){
meanValues = c() #Defining the output vector
for(i in 1:length(vector)){
meanValues = c(meanValues,mean(vector[1:i])) #Taking the running mean for ith element
}
return(meanValues)
}
# Sample Input 1
a = c(3,4,5,6,7,8)
RunningMean(a)
#Sample Input 2
b = c(10,70,45,32,20)
RunningMean(b)
#<-------------------------Question 2--------------------------->
forecast = function(vector,alpha = 0.8){
forecastValues = data.frame() #Defining the output Data Frame
forecastValues = rbind(forecastValues,data.frame(Actual = vector[1],Predicted = vector[1])) #Adding the first row values from the vector
for(i in 2:length(vector)){
Predicted = forecastValues$Predicted[i-1]+alpha*(forecastValues$Actual[i-1] - forecastValues$Predicted[i-1]) #Defining the formula
forecastValues = rbind(forecastValues,data.frame(Actual = vector[i],Predicted = Predicted)) #Binding the new values to the data frame
}
return(forecastValues)
}
# Sample Input 1
a = c(10,15,20,25,30)
forecast(a)
# Sample Input 2
b = c(6,8,9,11,12)
forecast(b)
#<-------------------------Question 3--------------------------->
#install.packages("schoolmath")
library(schoolmath) #loading the schoolmath package
NumberOfPrimes = function(a=1,b=1){
count = 0 #Initializing the count value to zero
for(i in a:b){
if(is.prim(i)){ #using is.prim function from schoolmath package to check wheather a number is prime or not
count = count + 1 #using counter to count the number of primes
}
}
return(count)
}
# Sample Input 1
NumberOfPrimes(1,5)
# Sample Input 2
NumberOfPrimes(10,5)
#<-------------------------Question 4--------------------------->
RollDice = function(){
outcome = c(1,2,3,4,5,6) #All possible outcomes of rolling a dice
result = sample(x = outcome,size = 2,replace = TRUE) #storing the results of simulating two dice rolls
ifelse(result[1]==result[2],return("You Win"),return("You Lose")) #returning results after comparision
}
# Sample Trial 1
RollDice()
# Sample Trial 2
RollDice()
#<-------------------------Question 5--------------------------->
Missing = function(dataFrame){
resultFrame = data.frame() #Intitializing the result Data Frame
for(i in 1:ncol(dataFrame)){
x1 = colnames(dataFrame)[i] #Retrieving the column name
x2 = sum(is.na(dataFrame[,i])) #calculating the number of NA values
x3 = sum(is.na(dataFrame[,i]))/length(dataFrame[,i]) #Calculating the % of NA values
x4 = length(unique(dataFrame[,i])) #Calculating the number of unique values
resultFrame = rbind(resultFrame,data.frame(x1,x2,x3,x4)) #Binding the new results to the data frame
}
colnames(resultFrame) = c("Column Name","Missing Values","% Missing Values","Unique Values") #Defining the column names
return(resultFrame)
}
# Sample input 1
library(MASS)
Missing(survey)
# Sample input 2
Missing(Boston)
# Sample Input 1
NumberOfPrimes(11,20)
setwd("~/MSBAPM/Machine Learning A-Z udemy/Clustering/Kmeans")
dataset = read.csv('Mall_Customers.csv')
dataset = read.csv('Mall_Customers.csv')
View(dataset)
X = dataset[4:5]
set.seed(6)
wcss = vector()
plot(1:10,wcss,type = "b",main = 'Cluster of Clients',xlab = 'Number of Clusters', ylab = 'WCSS')
for(i in 1:10){
wcss[i] = sum(kmeans(X,i)$withinss)
}
plot(1:10,wcss,type = "b",main = 'Cluster of Clients',xlab = 'Number of Clusters', ylab = 'WCSS')
kmeans = kmeans(X,5,iter.max = 300, nstart = 10)
library(Cluster)
install.packages("cluster")
library(Cluster)
library(cluster)
clusplot(X,kmeans$cluster,lines = 0, shade = TRUE, color = TRUE,
labels = 2, plotchar = FALSE, span = TRUE, main = "Cluster of Clients"
xlab ="Annual Income", ylab = "Spending Score")
clusplot(X,kmeans$cluster,lines = 0, shade = TRUE, color = TRUE,
labels = 2, plotchar = FALSE, span = TRUE, main = "Cluster of Clients",
xlab ="Annual Income", ylab = "Spending Score")
setwd("~/MSBAPM/Machine Learning A-Z udemy/Clustering/Hierarchical")
setwd("~/MSBAPM/Machine Learning A-Z udemy/Clustering/Hierarchical")
# Importing the dataset
dataset = read.csv('Mall_Customers.csv')
X = dataset[4:5]
dendogram = hclust(dist(X, method = 'euclidean'),method = 'ward.D')
plot(dendogram,main = 'Dendogram',xlab = 'Customers',ylab = 'Euclidean Distances')
hc = hclust(dist(X, method = 'euclidean'),method = 'ward.D')
y_hc = cutree(hc,5)
library(cluster)
clusplot(X,y_hc,lines = 0, shade = TRUE, color = TRUE,
labels = 2, plotchar = FALSE, span = TRUE, main = "Cluster of Clients",
xlab ="Annual Income", ylab = "Spending Score")
